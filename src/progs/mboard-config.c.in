/* $Id $ */
/*!
 * \file mboard-config.c
 * 
 * \code
 *      Author: Lee-Shawn Chin 
 *      Date  : Oct 2008 
 *      Copyright (c) 2008 STFC Rutherford Appleton Laboratory
 * \endcode
 * 
 * \brief Program to output compilation flags needed to compile external
 * programs with libmboard
 * 
 * Flag values are statically defined during ./configure
 * 
 * Supported options:
 *  --cflags  
 *  --ldflags  
 *  --libs
 *  --debug    
 *  --serial   
 *  --parallel 
 *  --mpi
 * 
 *  --version
 *  --query
 *
 * \note We use GNU's argp.h to parse input arguments and options. It 
 *       provides hierarchical argument parsing (layered over getopt). 
 */
/*@-fullinitblock -retvalother -unrecog@*/

#ifdef HAVE_CONFIG_H
#include "mb_config.h"
#endif
#include <argp.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

/* ------------- INSTALLATION SPECIFIC PARAMETERS ------------------ */
/* (these parameters are generated during ./configure) */

#define MB_INSTALL_PREFIX     "@prefix@"
#define MB_INSTALL_EXECPREFIX "@exec_prefix@"
#define MB_INSTALL_BINDIR     "@MB_INSTALL_BINDIR@"
#define MB_INSTALL_LIBDIR     "@MB_INSTALL_LIBDIR@"
#define MB_INSTALL_INCLUDEDIR "@MB_INSTALL_INCLUDEDIR@"

#define MB_PRODUCTION_CFLAGS  "@PRODUCTION_CFLAGS@"
#define MB_DEBUG_CFLAGS       "@DEBUG_CFLAGS@"

#define MB_PARALLEL_CFLAGS    "@MB_PARALLEL_CFLAGS@"
#define MB_PARALLEL_LDFLAGS   "@MB_PARALLEL_LDFLAGS@"
#define MB_PARALLEL_LIBS      "@MB_PARALLEL_LIBS@"

#define MB_PTHREADS_CFLAGS    "@THREADS_CFLAGS@"
#define MB_PTHREADS_LDFLAGS   "@THREADS_LDFLAGS@"
#define MB_PTHREADS_LIBS      "@THREADS_LIBS@"

#define MB_MPI_CFLAGS         "@MPICFLAGS@"
#define MB_MPI_LDFLAGS        "@MPILDFLAGS@"
#define MB_MPI_LIBS           "@MPILIBS@"

#define MB_DEFAULT_CC         "@CC@"
#define MB_DEFAULT_CFLAGS     "@CFLAGS@"
#define MB_DEFAULT_LDFLAGS    "@LDFLAGS@"
#define MB_DEFAULT_LIBS       "@LIBS@"

#define MB_CUNIT_CFLAGS       "@CUNITCFLAGS@"
#define MB_CUNIT_LDFLAGS      "@CUNITLDFLAGS@"
#define MB_CUNIT_LIBS         "@CUNITLIBS@"

#define MB_MEMLOG_CFLAGS      "@MEMLOG_CFLAGS@"

#define MB_WANT_PARALLEL      @WANT_PARALLEL@
#define MB_WANT_TESTS         @WANT_TESTS@
#define MB_WANT_MEMLOG        @WANT_MEMLOG@

/* --------------- STATIC PARAMETERS --------------------------- */

#define MB_LIB_SERIAL         "-lmboard_s"
#define MB_LIB_PARALLEL       "-lmboard_p"
#define MB_LIB_SERIAL_DEBUG   "-lmboard_sd"
#define MB_LIB_PARALLEL_DEBUG "-lmboard_pd"

#define MEMLOG_WARNING "!! NOTE: Memory usage logging (memlog) is ENABLED. This will greatly affect performance!\n"
/* --------------- CONVENIECE MACROS ---------------------------- */
#define IGNORE_OPTION(opt, label) if (1==arguments.opt) {fprintf(stderr, "WARNING: %s option ignored.\n", label);arguments.opt=0;}

/* ----------- argp stuff for parsing input args and options ----------- */

/*! \brief ARGP var: program version */
const char *argp_program_version = "Message Board Library (@PACKAGE_VERSION@) - Configuration Utility ";

/*! \brief ARGP var: bug report address */
const char *argp_program_bug_address = "@PACKAGE_BUGREPORT@";

/*! \brief ARGP var: documentation string */
static char doc[] = "\n"
        "mboard-config is the Message Board Library  configuration  utility.  It \n"
        "should  be  used by  application developers  to determine the necessary\n"
        "command-line options for the compiler and linker, as well  as  querying\n"
        "the configuration options used to compile the associated libraries.\n\n"
        
        "Usage:\n"
        "mboard-config --version\n"
        "mboard-config --query\n"
        "mboard-config [--debug] [--serial|--parallel] [--mpi] --cflags\n" 
        "mboard-config [--debug] [--serial|--parallel] [--mpi] --ldflags\n" 
        "mboard-config [--debug] [--serial|--parallel] [--mpi] --libs\n" 
        "\n"
        
        "Example:\n"
        "gcc `mboard-config --cflags`  -c test.c\n"
        "gcc `mboard-config --ldflags` -o program test.o `mboard-config --libs`\n\n"
        
        "More Options:";

/*! \brief ARGP var: accepted arguments */
static char args_doc[1];

/*! \brief ARGP var: accepted options */
static struct argp_option options[] = {
  {"version",  'v', 0, 0, "Show Message Board Library version" , 0},
  {"query",    'q', 0, 0, "Show configuration details of Message Board Library", 0},
  
  {"cflags",   'c', 0, 0, "Display neccessary compiler options to use libmboard", 0},
  {"ldflags",  'l', 0, 0, "Display neccessary linker options to use libmboard", 0},
  {"libs",     'L', 0, 0, "Display neccessary libraries to use libmboard", 0},
  
  {"serial",   's', 0, 0, "Use serial libmboard (default)", 0},
  {"parallel", 'p', 0, 0, "Use parallel libmboard", 0},
  
  {"debug",    'd', 0, 0, "Use debug version of libmboard", 0},
  {"mpi",      'm', 0, 0, "Include MPI library specific options (to avoid using mpicc)", 0},
  
  { 0 }
};

/*! \brief ARGP: datatype used to interact with parse_opt() */
struct arguments
{
  char *args[1];

  int version, query;
  int cflags,ldflags,libs;
  int serial,parallel;
  int debug,mpi;
  
};

/* ARGP parse function. Doxygen comment declared further down this file */
static error_t parse_opt(int key, char *arg, struct argp_state *state);

/*! \brief ARGP: Instance of parser */
static struct argp argp = { options, parse_opt, args_doc, doc };

/* ------ argp config arguments ------ */

/*! \brief var for interacting with parse_opt() */
struct arguments arguments;

/* ------ function prototypes ------ */
int print_version(void);
int print_query(void);
int print_requested_flags(void);

/* ----------- Start main program ----------- */

/*! 
 * \brief main function called at start of program 
 * \param[in] argc Input argument count
 * \param[in] argv Array of input arguments
 * \return Integer return code
 */
int main(int argc, char **argv) {
  
    int rc;
           
    /* Parse our arguments */
    argp_parse (&argp, argc, argv, 0, 0, &arguments);
    
    if (1 == arguments.query || 1 == arguments.version)
    {
    	IGNORE_OPTION(cflags,   "-c (--cflags)");
    	IGNORE_OPTION(ldflags,  "-l (--ldflags)");
    	IGNORE_OPTION(libs,     "-L (--libs)");
    	IGNORE_OPTION(serial,   "-s (--serial)");
    	IGNORE_OPTION(parallel, "-p (--parallel)");
    	IGNORE_OPTION(debug,    "-d (--debug)");
    	IGNORE_OPTION(mpi,      "-m (--mpi)");
    	
    	if (1 == arguments.query) rc = print_query();
    	else rc = print_version();
    }
    else
    {
    	if (1!=arguments.serial && 1!=arguments.parallel)
    		arguments.serial = 1; /* default */
    		
    	if (1==arguments.serial && 1==arguments.parallel) 
    		IGNORE_OPTION(parallel, "-p (--parallel)");
    	if (1==arguments.serial && 1==arguments.mpi) 
    		IGNORE_OPTION(mpi, "-m (--mpi)");
    		    	
    	rc = print_requested_flags();
    }
    
    if (MB_WANT_MEMLOG == 1)
	{
		fprintf(stderr, MEMLOG_WARNING);
	}
	
	return rc;    
}

/*!
 * \brief Function used to process input arguments
 * \return Error code (\c error_t)
 * 
 * This function is called by <tt>argp_parse()</tt> on each input argument
 */
static error_t parse_opt (int key, char *arg, struct argp_state *state)
{
    /* Get the input argument from argp_parse, which we
     * know is a pointer to our arguments structure. 
     */
    struct arguments *arguments = state->input;

    switch (key)
    {
        case 'v':
            arguments->version = 1;
            break;

        case 'q':
            arguments->query = 1;
            break;

        case 'c':
            arguments->cflags = 1;
            break;

        case 'l':
            arguments->ldflags = 1;
            break;

         case 'L':
            arguments->libs = 1;
            break;

        case 's':
            arguments->serial = 1;
            break;

        case 'p':
            arguments->parallel = 1;
            break;
		
        case 'd':
            arguments->debug = 1;
            break;
            
        case 'm':
            arguments->mpi = 1;
            break;
            
        case ARGP_KEY_ARG:
        	/* we don't expect any arguments */
        	argp_usage(state);

    
        default:
            return ARGP_ERR_UNKNOWN;
    }
    
    return 0;
}


int print_version(void) { 
	printf("Message Board Library (@PACKAGE_VERSION@)\n");
	
	return 0; 
}
int print_query(void) { 
	
	printf("\n");
	
	printf("----- [ General Info ] --------------------------------\n");
	printf("Name              : Message Board Library\n");
	printf("Version           : @PACKAGE_VERSION@\n");
	printf("Config directory  : @MB_SRC_DIR@\n");
	printf("Config date       : @MB_CONFIG_DATE@\n");
	printf("\n");
	
	printf("----- [ Installation paths ] --------------------------\n");
	printf("Install path      : %s\n", MB_INSTALL_PREFIX);
	printf("bin directory     : %s\n", MB_INSTALL_BINDIR);
	printf("lib directory     : %s\n", MB_INSTALL_LIBDIR);
	printf("include directory : %s\n", MB_INSTALL_INCLUDEDIR);
	printf("\n");
	
	printf("----- [ Compilation details ] -------------------------\n");
	printf("Compiler used     : %s\n", MB_DEFAULT_CC);
	printf("\n");
	
	printf("# libmboard_s.a (Serial library, production)\n");
	printf("Compiler flags    : @CFLAGS@ @PRODUCTION_CFLAGS@\n");
	printf("Linker options    : @LDFLAGS@ @LIBS@\n");
	printf("\n");
	
	printf("# libmboard_sd.a (Serial library, debug)\n");
	printf("Compiler flags    : @CFLAGS@ @DEBUG_CFLAGS@\n");
	printf("Linker options    : @LDFLAGS@ @LIBS@\n");
	printf("\n");
	
	if (MB_WANT_PARALLEL == 1)
	{
	printf("# libmboard_p.a (Parallel library, production)\n");
	printf("Compiler flags    : @CFLAGS@  @MB_PARALLEL_CFLAGS@ @PRODUCTION_CFLAGS@\n");
	printf("Linker options    : @MB_PARALLEL_LDFLAGS@ @MB_PARALLEL_LIBS@\n");
	printf("\n");
	
	printf("# libmboard_pd.a (Parallel library, debug)\n");
	printf("Compiler flags    : @CFLAGS@  @MB_PARALLEL_CFLAGS@ @DEBUG_CFLAGS@\n");
	printf("Linker options    : @MB_PARALLEL_LDFLAGS@ @MB_PARALLEL_LIBS@\n");
	printf("\n");
	}
	else
	{
		printf("!! NOTE: Parallel libraries NOT COMPILED\n");
	}
	
	return 0;
}

int print_requested_flags(void) { 
	
	/* print CFLAGS */
	if (arguments.cflags == 1)
	{
		/* prepend basic cflags */
		printf("-I@MB_INSTALL_INCLUDEDIR@ ");
		
		/* for parallel compilation */
		if (arguments.parallel == 1)
		{
			/* add pthread support */
			printf("@THREADS_CFLAGS@ ");
			
			/* if users not using MPI Compiler wrappers (mpicc, mpcc,...)
			 * we need to provide them with the suitable flags for mpi
			 * support */
			if (arguments.mpi == 1)
			{
				printf("@MPICFLAGS@ ");
			} 
			 
		}
	}
	
	/* print LDFLAGS */
	if (arguments.ldflags == 1)
	{
		/* prepend basic ldflags */
		printf("-L@MB_INSTALL_LIBDIR@");
		
		/* for parallel compilation */
		if (arguments.parallel == 1)
		{
			/* add pthread support */
			printf("@THREADS_LDFLAGS@ ");
			
			/* if users not using MPI Compiler wrappers (mpicc, mpcc,...)
			 * we need to provide them with the suitable flags for mpi
			 * support */
			if (arguments.mpi == 1)
			{
				printf("@MPILDFLAGS@ ");
			} 
			 
		}
	}
	
	/* print LIBS */
	if (arguments.libs == 1)
	{
		
		/* for parallel compilation */
		if (arguments.parallel == 1)
		{
			if (arguments.debug == 1)
			{
				printf("%s ", MB_LIB_PARALLEL_DEBUG);
			}
			else
			{
				printf("%s ", MB_LIB_PARALLEL);
			}
			
			/* add pthread support */
			printf("@THREADS_LIBS@ ");
			
			/* if users not using MPI Compiler wrappers (mpicc, mpcc,...)
			 * we need to provide them with the suitable flags for mpi
			 * support */
			if (arguments.mpi == 1)
			{
				printf("@MPILIBS@ ");
			} 
			 
		}
		else /* serial compilation */
		{
			if (arguments.debug == 1)
			{
				printf("%s ", MB_LIB_SERIAL_DEBUG);
			}
			else
			{
				printf("%s ", MB_LIB_SERIAL);
			}
		}
		
		/* append basic libs */
		printf("@LIBS@");
	}
		
	return 0; 	
}
