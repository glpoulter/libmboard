#!/bin/bash
# $Id$
# ===========================================================================
#
# Copyright (c) 2009 STFC Rutherford Appleton Laboratory 
# Author: Lee-Shawn Chin 
# Date  : Feb 2009
#
# File  : compile_coverage.sh
# Desc  : Script to gather coverage analysis output generated by gcc/gcov
#         and compile it all as a comprehensive HTML report using LCOV
#
# ===========================================================================

# -------------------------- CONFIG VARS ------------------------------------

# base dir
BASE_DIR="."

# unit test dirctory
TESTS_DIR="${BASE_DIR}/tests"

# Define tests 
# Format <testname>:<s|p|u>
SERIAL_TESTS="run_test_utils:u run_test_serial:s"
PARALLEL_TESTS="run_test_parallel_utils:p run_test_parallel:p"
TESTS="$SERIAL_TESTS"
if [ @WANT_PARALLEL@ -ne 0 ]
then
	TESTS="$TESTS $PARALLEL_TESTS"

	# Opts to run test in parallel
	PROCS_TO_USE="2"
	MPIEXEC_ARGS="-np ${PROCS_TO_USE}"
	MPIEXEC_CMDS="mpiexec mpirun"
	# search for suitable MPIEXEC
	for i in $MPIEXEC_CMDS
	do
		$i &> /dev/null
		if [ $? -eq 0 ]
		then
			MPIEXEC_CMD=$i
			break
		fi
	done
	if [ "$MPIEXEC_CMD" == "" ]
	then
		echo "ERROR: No suitable 'mpiexec' command found"
		exit 1
	fi

fi

# Executables
GCOV="gcov"
LCOV="lcov"
GENHTML="genhtml"

# Log Files
LOG_FILE="coverage.log"
ERR_FILE="coverage.err"

# Output directory
OUTDIR="coverage_html"

# Name of test
TITLE="@PACKAGE_NAME@ @PACKAGE_VERSION@"

# -------------------------- INTERNAL FUNC ----------------------------------

function quitOnError {

    RC=$1; MSG=$2

    if [ $RC -ne 0 ]; then
        echo "ERROR: $MSG" >&2
        exit 1
    fi
}

function rename_covdata {
    
    DEST_DIR=$1
    PREFIX=$2
    POSTFIX=$3

    cd $DEST_DIR
    for i in *.c
    do
        TARGET="${PREFIX}${i%.c}.${POSTFIX}"
        DEST="${i%.c}.${POSTFIX}"
        if [ -f $TARGET ]
        then
            rm $DEST 2> /dev/null
            ln -s $TARGET $DEST
        fi

    done

}

# ============================ BEGIN ========================================

# Empty log files (create if it does not exist)
> $LOG_FILE
> $ERR_FILE

# Check exes
$GCOV --version &> /dev/null
quitOnError $? "$GCOV command not found"
$LCOV --version &> /dev/null
quitOnError $? "$LCOV command not found. Install LCOV and try again."
$GENHTML --version &> /dev/null
quitOnError $? "$GENHTML command not found. Install LCOV and try again."

# Initialise list of output files
OUTFILELIST=""

# For each serial test
for TEST in $TESTS
do
    T=`echo $TEST | cut -d":" -f1` # get test name
    M=`echo $TEST | cut -d":" -f2` # get mode (u|s|p = utility | serial | parallel)
    
    echo "Running tests ($T)"
    echo "-------------------------------------------------"
    
    # Some preprocessing
    echo -n " * Mapping *.gcno files to source files ... "
    if [ "$M" == "s" ]
    then
        (rename_covdata "${BASE_DIR}/src/serial" "lib_mb_s_la-" "gcno") >> $LOG_FILE 2>>$ERR_FILE
        quitOnError $? "See $ERR_FILE for details"
    fi
    if [ "$M" == "p" ]
    then
        (rename_covdata "${BASE_DIR}/src/parallel" "lib_mb_p_la-" "gcno") >> $LOG_FILE 2>>$ERR_FILE
        quitOnError $? "See $ERR_FILE for details"
    fi
    (rename_covdata "${BASE_DIR}/src/utils" "lib_utils_la-" "gcno") >> $LOG_FILE 2>>$ERR_FILE
    quitOnError $? "See $ERR_FILE for details"
    echo "DONE"

    # Zero gcov counters
    echo -n " * Resetting execution counters ... "
    $LCOV --zerocounter -d ${BASE_DIR}/src/serial >> $LOG_FILE 2>>$ERR_FILE
    quitOnError $? "See $ERR_FILE for details"
    $LCOV --zerocounter -d ${BASE_DIR}/src/utils >> $LOG_FILE 2>>$ERR_FILE
    quitOnError $? "See $ERR_FILE for details"
    echo "DONE"

    # Run test
    echo -n " * Running test program ($T) ... "
    RUNNER=""
    if [ "$M" == "p" ]
    then
        RUNNER="$MPIEXEC_CMD $MPIEXEC_ARGS "
    fi
    $RUNNER ${TESTS_DIR}/$T >> $LOG_FILE 2>>$ERR_FILE
    quitOnError $? "See $ERR_FILE for details"
    echo "DONE"

    # more preprocessing
    echo -n " * Mapping *.gcda files to source files ... "
    if [ "$M" == "s" ]
    then
        (rename_covdata "${BASE_DIR}/src/serial" "lib_mb_s_la-" "gcda") >> $LOG_FILE 2>>$ERR_FILE
        quitOnError $? "See $ERR_FILE for details"
    fi
    if [ "$M" == "p" ]
    then
        (rename_covdata "${BASE_DIR}/src/parallel" "lib_mb_p_la-" "gcda") >> $LOG_FILE 2>>$ERR_FILE
        quitOnError $? "See $ERR_FILE for details"
    fi
    (rename_covdata "${BASE_DIR}/src/utils" "lib_utils_la-" "gcda") >> $LOG_FILE 2>>$ERR_FILE
    quitOnError $? "See $ERR_FILE for details"
    echo "DONE"

    # Capture coverage data
    echo -n " * Capturing coverage data ... "
    OUTFILE="gcov_${T}.info"
    OUTFILELIST="$OUTFILE $OUTFILELIST" # Appen filename to list
    DIR_OPT="-d ${BASE_DIR}/src/utils"
    if [ "$M" == "s" ]
    then
        DIR_OPT="${DIR_OPT} -d ${BASE_DIR}/src/serial"
    elif [ "$M" == "p" ]
    then
        DIR_OPT="${DIR_OPT} -d ${BASE_DIR}/src/parallel"
    fi
   
    $LCOV --capture $DIR_OPT --gcov-tool $GCOV --ignore-errors "source" \
          -t $T -o $OUTFILE >> $LOG_FILE 2>> $ERR_FILE
    quitOnError $? "See $ERR_FILE for details"
    echo -e "DONE\n"

done


# Generate HTML from list of output files
echo -n "* Generating HTML ... "
$GENHTML -t "$TITLE" --frames --show-details -o $OUTDIR $OUTFILELIST >> $LOG_FILE 2>> $ERR_FILE
quitOnError $? "See $ERR_FILE for details"
echo "DONE"

# Clean up
rm $OUTFILELIST

echo -e "\nAnalysis output available in $OUTDIR"

